---
title: "OTP benchmark"
format: gfm
---

```{r}
#| label: packages
#| message: false
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("remotes")) install.packages("remotes")
pkgs = c(
    "sf",
    "tidyverse",
    "osmextract",
    "lwgeom",
    "opentripplanner"
)
remotes::install_cran(pkgs)
sapply(pkgs, require, character.only = TRUE)
```

We'll set the Java version to 17 (the recommended version is 17 according to [opentripplanner docs](https://docs.ropensci.org/opentripplanner/articles/OTPv2.html)) for the folder with [rJavaEnv](http://www.ekotov.pro/rJavaEnv/) as follows:

```{r}
#| label: Set Java version
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}

remotes::install_github("e-kotov/rJavaEnv")
rJavaEnv::java_quick_install(version = 17)
```

Check you have the correct Java version:

```{r}
otp_check_java(2)
```

The following code is to test the performance of the OTP routing engine running locally controlled by the `opentripplanner` package with a sample of Origins and Destinations

We will read the OD data produced for this test
```{r}
#| label: read-data
od_geo = sf::read_sf("input_data/od_data_100_sf.geojson")
```

Extracting Origins and Destinations with the `'lwgeom` package

```{r}
#| label: od-extract
origins <- lwgeom::st_startpoint(od_geo) |> sf::st_as_sf()
origins$O <- od_geo$O


destinations <- lwgeom::st_endpoint(od_geo) |> sf::st_as_sf()
destinations$D <- od_geo$D
```


### Setting up OTP

The following codes will prepare the folders and files that are required for the OTP server to run

#### Creating the folder structure

We create a folder for the leeds, which will be used as a router in the OTP functions
```{r}
#| label: dir-create
dir.create("OTP/graphs/leeds",recursive = T,showWarnings = F)
```

Using the `osmextract` package we can extract the OSM data
```{r}
#| label: osm-get
leeds_osm <- osmextract::oe_get("leeds",
                                download_directory = "OTP/graphs/leeds")
```

Specifying the paths

```{r}
#| label: dir-paths
path_data <- file.path("OTP")
path_otp <- otp_dl_jar(path_data, cache = T, version = "2.2.0")
```

Creating the config file for the router. For this purpose we are going to use the default values
```{r}
#| label: setup-router
if(!file.exists("OTP/graphs/leeds/router-config.json")){
router_config <- otp_make_config("router")
otp_validate_config(router_config)
# router_config$routingDefaults$triangleSafetyFactor ### For quietness optimisation
# router_config$routingDefaults$$triangleTimeFactor ### For speed optimisation
otp_write_config(router_config,                # Save the config file
                 dir = path_data,
                 router = "leeds")  
}
```

We could also save some GTFS data at this poing, if needed. For this test we do not neet it, so 
we built the graph with the following code.

```{r}
#| label: graph-prep
if(!file.exists("OTP/graphs/leeds/Graph.obj")){
log1 <- otp_build_graph(otp = path_otp,router = "leeds", dir = path_data,memory = 15000)
}
```

We initialise the OTP server once the graph has been built
```{r}
#| label: init-server
#| eval: true
log2 <- otp_setup(otp = path_otp, dir = path_data,router = "leeds",memory = 15e3)
```

Connect to the server as follows:

```{r}
otpcon <- otp_connect(timezone = "Europe/London", router = "leeds")

```

Check the OTP server is running by navigating to `http://localhost:8080/` in your browser

Using the `otp_plan` function, we can generate the routes for the origins and destinations. We will use `system.time` to measure the time used for processing the routes
```{r}
#| label: route-extract
system.time({
routes2 <- otp_plan(otpcon = otpcon,
                    fromPlace = origins,
                    toPlace = destinations,
                    fromID = origins$O,
                    toID = destinations$D,
                    mode = "BICYCLE")
})
```

A quick look at the result

```{r}
#| label: plot-routes
plot(routes2[,"geometry"])
```




